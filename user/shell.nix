{ config, lib, pkgs, ... }: {
	# The path to the user's shell.
	users.users.${config.userName}.shell = lib.mkIf config.programs.fish.enable pkgs.fish;

	programs.fish = {
		# Whether to configure FISH as an interactive shell.
		enable = true;

		# Set of basic shell abbreviations.
		shellAbbrs = rec {
			# Short abbreviations.
			c = "clear";
			x = "exit";

			# Finding text in a directory.
			fdtext = ''grep -Rn -e'';

			# Safer file copying.
			cp = "cp -v -i";
			copy = cp;

			# Safer directory copying.
			cpdir = "cp -r -v -i";
			copy-directory = cpdir;

			# Safer moving of files.
			mv = "mv -v -i";
			move = mv;

			# Safer file deletion.
			rm = "rm -v -i";
			remove = rm;

			# Safer directory deletion.
			rmdir = "rm -d -r -v -i";
			remove-directory = rmdir;

			# Going back more directories.
			"..." = "cd ../../";
			".3" = "cd ../../";
			"...." = "cd ../../../";
			".4" = "cd ../../../";
			"....." = "cd ../../../../";
			".5" = "cd ../../../../";
			"......" = "cd ../../../../../";
			".6" = "cd ../../../../../";

			# Backup user files. Change the backup directory as needed.
			backup = ''rsync -av --progress -h --delete --delete-excluded --exclude-from="${config.users.users.${config.userName}.home}/.exclude.txt" ${config.users.users.${config.userName}.home}/ /run/media/${config.userName}/744GB-HDD-EXT/Backups-Rsync/'';

			reverse-backup = ''rsync -av --progress -h /run/media/${config.userName}/744GB-HDD-EXT/Backups-Rsync/ ${config.users.users.${config.userName}.home}/'';

			# Toggling recent files.
			enable-recent-files = "sudo rm -v -i ~/.local/share/recently-used.xbel";
			disable-recent-files = "sudo rm -v -i ~/.local/share/recently-used.xbel; touch ~/.local/share/recently-used.xbel && sudo chattr -V +i ~/.local/share/recently-used.xbel";

			# NixOS.
			channel-list = "sudo nix-channel --list";
			channel-change = "sudo nix-channel --add https://channels.nixos.org/nixos-XX.XX nixos && micro /etc/nixos/User/Home-Manager.nix";
			nix-list = "sudo nixos-rebuild list-generations";
			nix-clean = "sudo nix-collect-garbage -d --quiet --log-format bar-with-logs";
			nix-test = ''set -x CURRENTDIR $(pwd) && cd /tmp/ && sudo nixos-rebuild test --quiet --log-format bar-with-logs; cd "$CURRENTDIR"'';
			nix-update-now = "sudo nixos-rebuild switch --quiet --log-format bar-with-logs";
			nix-update-boot = "sudo nixos-rebuild boot --quiet --log-format bar-with-logs";
			nix-upgrade-now = "sudo nixos-rebuild switch --upgrade --quiet --log-format bar-with-logs";
			nix-upgrade-boot = "sudo nixos-rebuild boot --upgrade --quiet --log-format bar-with-logs";

			# Create a NixOS `.iso` file from a valid configuration.
			mknixiso = "sudo nix-build '<nixpkgs/nixos>' -A config.system.build.isoImage -I nixos-config=configuration.nix --quiet --log-format bar-with-logs";

			# Delete an unused NixOS `.iso` generated by the command above.
			rmnixiso = "sudo nix-store --delete --ignore-liveness /nix/store/name-of-the-iso-here-linux.iso";

			# Download the latest stable NixOS `.iso` image (graphical and minimal).
			downloadnix = ''wget -v "https://channels.nixos.org/nixos-25.05/latest-nixos-graphical-x86_64-linux.iso"'';
			downloadminix = ''wget -v "https://channels.nixos.org/nixos-25.05/latest-nixos-minimal-x86_64-linux.iso"'';

			# Writing an `.iso` file to a drive.
			writeiso = "sudo dd bs=4M if=/path/to/file.iso of=/path/to/drive conv=fsync oflag=direct status=progress";

			# Creating an `.iso` file from a physical media.
			mkiso = "dd if=/dev/cdrom of=/path/to/the-iso.iso bs=4M status=progress";
		};
	};

	# Link the configuration file of the FISH shell.
	systemd.user.tmpfiles.users.${config.userName}.rules = lib.optional config.programs.fish.enable
	"L %h/.config/fish/config.fish - - - - /etc/nixos/user/files/config.fish";
}